#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&lt {
    tapping-term-ms = <250>;
    quick-tap-ms = <200>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    macros {
        console_bararamas: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&none &kp>,
                <&macro_press>,
                <&kp C &kp O &kp N &kp S &kp O &kp L &kp E &kp DOT &kp L &kp O &kp G &kp LPAR &kp SQT &kp B &kp A &kp R &kp A &kp R &kp A &kp M &kp A &kp S &kp SQT &kp COMMA &kp SPACE &kp SQT &kp SQT &kp RPAR>,
                <&macro_press>;

            label = "NEW_MACRO";
        };

        fun_rgb: fun_rgb {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 4 &rgb_ug RGB_COLOR_HSB(0,87,49)>;
            label = "FUN_RGB";
        };

        rgb_colmak: rgb_colmak {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &rgb_ug RGB_COLOR_HSB(253,97,52)>;
            label = "RGB_COLMAK";
        };

        rgb_num: rgb_num {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 2 &rgb_ug RGB_COLOR_HSB(57,93,50)>;
            label = "RGB_NUM";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        COLMAK-DH {
            bindings = <
&lt 3 ESCAPE  &kp Q           &lt 4 W             &lt 2 F             &lt 3 P       &kp B                            &kp UP                       &kp J        &kp L              &kp U                &kp Y                &kp SEMI         &kp MINUS
&lt 2 TAB     &ht LEFT_ALT A  &ht LEFT_CONTROL R  &ht LEFT_COMMAND S  &ht LSHIFT T  &kp G                  &kp LEFT  &kp C_PLAY_PAUSE  &kp RIGHT  &kp M        &ht RIGHT_SHIFT N  &ht RIGHT_COMMAND E  &ht RIGHT_CONTROL I  &ht RIGHT_ALT O  &kp SQT
&mo 4         &kp X           &kp C               &kp D               &kp V         &kp Z        &trans              &kp DOWN                     &kp K        &kp H              &kp COMMA            &kp DOT              &kp FSLH         &fun_rgb
                                                  &to 1               &lt 3 SPACE   &lt 2 SPACE                                                   &lt 2 ENTER  &kp BACKSPACE      &fun_rgb
            >;

            label = "COLMAK-DH";
        };

        QWERTY {
            display-name = "QWERTY";
            bindings = <
&kp ESCAPE  &kp Q           &kp W               &kp E               &kp R             &kp T                            &kp UP                       &kp Y        &kp U              &kp I                &kp O                &kp P                    &kp MINUS
&lt 2 TAB   &ht LEFT_ALT A  &ht LEFT_CONTROL S  &ht LEFT_COMMAND D  &ht LEFT_SHIFT F  &kp G                  &kp LEFT  &kp C_PLAY_PAUSE  &kp RIGHT  &kp H        &ht RIGHT_SHIFT J  &ht RIGHT_COMMAND K  &ht RIGHT_CONTROL K  &ht RIGHT_ALT SEMICOLON  &kp SQT
&mo 4       &kp Z           &kp X               &kp C               &kp V             &kp B        &trans              &kp DOWN                     &kp N        &kp M              &kp COMMA            &kp DOT              &kp FSLH                 &fun_rgb
                                                &to 0               &lt 3 SPACE       &lt 2 SPACE                                                   &lt 2 ENTER  &kp BACKSPACE      &fun_rgb
            >;
        };

        NUMBERS {
            display-name = "NUMBER";
            bindings = <
&kp ESCAPE       &kp N1      &kp N2                   &kp N3     &kp N4                                       &kp N5                                                   &kp C_VOLUME_UP                &kp N6               &kp N7           &kp N8          &kp N9        &kp N0           &kp BSPC
&rgb_ug RGB_TOG  &bt BT_PRV  &bt BT_NXT               &none      &trans                                       &trans                                       &kp C_PREV  &kp C_PLAY_PAUSE   &kp C_NEXT  &kp HOME             &kp LEFT_ARROW   &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &kp PG_UP
&bt BT_DISC 0    &kp LC(C)   &mt LA(SPACE) LG(SPACE)  &mkp LCLK  &mt C_AC_DESKTOP_SHOW_ALL_WINDOWS LG(LC(F))  &mt LC(LG(LA(C_EJECT))) LC(LG(Q))  &trans                &kp C_VOLUME_DOWN              &mt K_MUTE C_VOL_DN  &kp C_VOLUME_UP  &to 1           &to 0         &kp END          &kp PG_DN
                                                      &tog 4     &mt LEFT_COMMAND SPACE                       &kp SPACE                                                                               &kp ENTER            &kp DEL          &kp RIGHT_ALT
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        SYMBOLS {
            display-name = "SYMBOL";
            bindings = <
&kp ESCAPE      &kp EXCL      &kp AT        &kp HASH   &kp DLLR              &kp PRCNT                            &kp C_VOLUME_UP               &kp CARET  &kp AMPS       &kp ASTRK  &kp LPAR          &kp RPAR           &kp BSPC
&bt BT_CLR_ALL  &trans        &kp LA(N)     &kp LA(E)  &kp LS(LA(NUMBER_2))  &kp LA(C)            &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT  &kp MINUS  &kp EQUAL      &kp GRAVE  &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp NON_US_BACKSLASH
&trans          &out OUT_USB  &out OUT_BLE  &none      &none                 &mkp MB5   &trans                    &kp C_VOL_DN                  &kp UNDER  &kp PLUS       &kp TILDE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp PIPE
                                            &trans     &trans                &kp SPACE                                                          &kp RET    &kp BACKSPACE  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        Fun {
            display-name = "Fun";
            bindings = <
&ht LC(C) ESCAPE             &ht LG(Q) LG(W)  &ht LG(S) LG(R)  &kp LG(C)                  &kp LG(V)                          &kp LS(LG(NUMBER_4))                      &kp UP                &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS  &kp LG(LA(LEFT))  &kp LC(LEFT)    &kp LC(RIGHT)  &kp LA(LG(RIGHT))  &kp LG(TAB)
&ht LG(LA(J)) RG(BACKSLASH)  &kp LEFT         &kp DOWN_ARROW   &kp UP_ARROW               &kp RIGHT                          &kp LG(LS(N5))                  &kp LEFT  &kp ENTER  &kp RIGHT  &mkp RCLK                          &mmv MOVE_LEFT    &mmv MOVE_DOWN  &mmv MOVE_UP   &mmv MOVE_RIGHT    &trans
&rgb_ug RGB_TOG              &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &kp LEFT_COMMAND           &kp LS(LG(F))                      &kp LEFT_CONTROL      &trans              &kp DOWN              &trans                             &msc SCRL_LEFT    &msc SCRL_DOWN  &msc SCRL_UP   &msc SCRL_RIGHT    &to 0
                                                               &ht LC(LEFT) LG(LA(LEFT))  &ht LC(RIGHT_ARROW) LG(LA(RIGHT))  &kp ENTER                                                       &mkp LCLK                          &kp BACKSPACE     &to 0
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;
        };
    };
};
